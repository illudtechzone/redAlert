/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.redalert.client.redalertmicroservice.api;

import com.illud.redalert.client.redalertmicroservice.model.FriendDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-27T11:35:27.177+05:30[Asia/Kolkata]")

@Api(value = "FriendResource", description = "the FriendResource API")
public interface FriendResourceApi {

    @ApiOperation(value = "createFriend", nickname = "createFriendUsingPOST", notes = "", response = FriendDTO.class, tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendDTO.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/friends",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<FriendDTO> createFriendUsingPOST(@ApiParam(value = "friendDTO" ,required=true )  @Valid @RequestBody FriendDTO friendDTO);


    @ApiOperation(value = "deleteFriend", nickname = "deleteFriendUsingDELETE", notes = "", tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/friends/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFriendUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "findByUserName", nickname = "findByUserNameUsingGET", notes = "", response = FriendDTO.class, responseContainer = "List", tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/friends1/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<FriendDTO>> findByUserNameUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getAllFriends", nickname = "getAllFriendsUsingGET", notes = "", response = FriendDTO.class, responseContainer = "List", tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/friends",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<FriendDTO>> getAllFriendsUsingGET(@ApiParam(value = "eagerload", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getFriend", nickname = "getFriendUsingGET", notes = "", response = FriendDTO.class, tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/friends/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<FriendDTO> getFriendUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateFriend", nickname = "updateFriendUsingPUT", notes = "", response = FriendDTO.class, tags={ "friend-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FriendDTO.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/friends",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<FriendDTO> updateFriendUsingPUT(@ApiParam(value = "friendDTO" ,required=true )  @Valid @RequestBody FriendDTO friendDTO);

}
